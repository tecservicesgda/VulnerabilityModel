from fastapi import APIRouter
from models.db_vulnerability import Vulnerability
from config.database import collection_name
from schema.schemas import list_serial
from bson import ObjectId

router = APIRouter()

#SEARCH method
@router.get("/search/")
async def search_vulnerabilities(q: str):
    vulnerabilities = list_serial(collection_name.find({"$or": [
        {"name": {"$regex": q}},
        {"description": {"$regex": q}},
        {"severity": q},
        {"state": {"$regex": q}}
    ]}))
    if not vulnerabilities:
        raise HTTPException(status_code=404, detail="No vulnerabilities found")
    return vulnerabilities

#GET method
@router.get("/")
async def get_vulnerabilities():
    vulnerabilities = list_serial(collection_name.find())
    return vulnerabilities

#POST method
@router.post("/")
async def create_vulnerabilities(vulnerabilitity: Vulnerability):
    collection_name.insert_one(dict(vulnerabilitity))

#PUT method
@router.put("/{id}")
async def edit_vulnerabilities(id: str, vulnerability: Vulnerability):
    collection_name.find_one_and_update({"_id": ObjectId(id)},{"$set": dict(vulnerability)})

#DELETE method
@router.delete("/{id}")
async def delete_vulnerabilities(id: str):
    collection_name.find_one_and_delete({"_id": ObjectId(id)})

